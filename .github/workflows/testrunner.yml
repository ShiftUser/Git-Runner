name: .NET Core Desktop CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: app/SeleniumDocker.sln
      Test_Project_Path: app/src/SeleniumDocker.csproj

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
          dotnet-version: "8.0.x"

    - name: Install Shift
      run: powershell -ExecutionPolicy Bypass -File "app/scripts/install-shift.ps1"

    - name: Install WinAppDriver
      run: powershell -ExecutionPolicy Bypass -File "app/scripts/install-winappdriver.ps1"

    - name: Install TightVNC
      run: |
        Invoke-WebRequest -Uri "https://www.tightvnc.com/download/2.8.84/tightvnc-2.8.84-gpl-setup-64bit.msi" -OutFile "C:\tightvnc.msi"
        Start-Process msiexec.exe -ArgumentList "/i C:\tightvnc.msi /quiet /norestart" -NoNewWindow -Wait
        Set-ItemProperty -Path "HKLM:\SOFTWARE\TightVNC\Server" -Name "Password" -Value ([BitConverter]::ToString((New-Object Security.Cryptography.MD5CryptoServiceProvider).ComputeHash([System.Text.Encoding]::Unicode.GetBytes("your_password"))).Replace("-",""))
        New-ItemProperty -Path "HKLM:\SOFTWARE\TightVNC\Server" -Name "AcceptRFBConnections" -Value 1 -PropertyType DWord -Force
        Start-Service -Name "tvnserver"

    - name: Install Dependencies
      run: |
        dotnet add ${{ env.Test_Project_Path }} package Appium.WebDriver
        dotnet add ${{ env.Test_Project_Path }} package Coverlet.Collector
        dotnet add ${{ env.Test_Project_Path }} package ExtentReports.Core
        dotnet add ${{ env.Test_Project_Path }} package FluentAssertions
        dotnet add ${{ env.Test_Project_Path }} package Microsoft.Extensions.Configuration.EnvironmentVariables
        dotnet add ${{ env.Test_Project_Path }} package Microsoft.Extensions.Configuration.Json
        dotnet add ${{ env.Test_Project_Path }} package Microsoft.NET.Test.Sdk
        dotnet add ${{ env.Test_Project_Path }} package NUnit
        dotnet add ${{ env.Test_Project_Path }} package NUnit.Analyzers
        dotnet add ${{ env.Test_Project_Path }} package NUnit3TestAdapter

    - name: Set Time Zone to Pacific Time
      run: tzutil /s "Pacific Standard Time"

    - name: List files in app directory
      run: dir app

    - name: Create solution file
      run: |
        dotnet new sln -n SeleniumDocker --force
        dotnet sln SeleniumDocker.sln add src/SeleniumDocker.csproj
      working-directory: app

    - name: Restore dependencies
      run: dotnet restore app/SeleniumDocker.sln

    - name: Build
      run: dotnet build app/SeleniumDocker.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Verify Build Output
      run: dir app/src/bin/${{ matrix.configuration }}/net5.0

    - name: Execute unit tests
      run: dotnet test app/SeleniumDocker.sln --configuration ${{ matrix.configuration }} --no-build --verbosity normal

    - name: Start Shift
      run: |
        $shiftPath = "$env:LOCALAPPDATA\Shift\chromium\shift.exe"
        if (Test-Path $shiftPath) {
          Start-Process -FilePath $shiftPath
          Write-Output "Shift started successfully."
        } else {
          Write-Output "Shift executable not found at $shiftPath."

    - name: Check if Shift is running
      run: Get-Process -Name shift -ErrorAction SilentlyContinue

    - name: Take Screenshot
      run: |
        $screenshotPath = "C:\Users\runneradmin\Desktop\screenshot.png"
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
        $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
        $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
        Write-Output "Screenshot taken: $screenshotPath"

    - name: Upload Screenshot
      uses: actions/upload-artifact@v2
      with:
        name: screenshot
        path: C:\Users\runneradmin\Desktop\screenshot.png

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
