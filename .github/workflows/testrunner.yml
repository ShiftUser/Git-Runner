name: .NET Core Desktop CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:

    runs-on: windows-latest

    env:
     
      Test_Project_Path: app/src/SeleniumDocker.csproj
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: "8.0.204"

    - name: List installed .NET SDKs
      run: dotnet --list-sdks


    - name: Setup WinAppDriver
      run: |
        curl -L -o WindowsApplicationDriver_1.2.1.msi https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi
        Start-Process msiexec -ArgumentList "/i D:\a\wido-ultimate\wido-ultimate\WindowsApplicationDriver_1.2.1.msi /norestart /qn" -Wait
      continue-on-error: true

    - name: Enable developer-mode
      run: |
       reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"

    - name: Install Shift
      run: powershell -ExecutionPolicy Bypass -File "app/scripts/install-shift.ps1"
      continue-on-error: true

    - name: Add Winappdriver firewall rule
      run: | 
       netsh advfirewall firewall add rule name="WinAppDriver remote" dir=in action=allow protocol=TCP localport=4723


    - name: Install Dependencies
      run: dotnet restore ${{ env.Test_Project_Path }}
     

    - name: Start Shift
      run: |
        $shiftPath = "$env:LOCALAPPDATA\\Shift\\chromium\\shift.exe"
        if (Test-Path $shiftPath) {
          Start-Process -FilePath $shiftPath
          Write-Output "Shift started successfully."
        } else {
          Write-Output "Shift executable not found at $shiftPath."
         }
      shell: pwsh

    - name: Check if Shift is running
      run: Get-Process -Name shift -ErrorAction SilentlyContinue
      shell: pwsh

    - name: Take Screenshot
      run: |
        $screenshotPath = "C:\Users\runneradmin\Desktop\screenshot.png"
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
        $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
        $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
        Write-Output "Screenshot taken: $screenshotPath"
      shell: pwsh

    - name: Upload Screenshot
      uses: actions/upload-artifact@v2
      with:
        name: screenshot
        path: C:\Users\runneradmin\Desktop\screenshot.png

    
